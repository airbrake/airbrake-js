# Airbrake JS Proposal

## Near-term changes

### Cleanup
 * Extend test framework
   * More unit tests (TBD: Need to explore current coverage)
   * Add acceptance tests (8 hours, lots of moving parts here)
 * Integrate project tests into product CI infrastructure (TBD: Depends on extant system)
 * Use better minifier (uglify rather than yuicompressor) (4 hours)
 * Wrap/Augment rather than clobber window.onerror (4 hours)

### Util changes
 * Move as much code execution to compile-time as possible, eg reimplement XML and JSON document generation functions to compiled templates (4 hours)
 * Util functions become closure-local (2 hours)
 * Solidify escaping functions
   * CDATA sections in XML (2 hours)
   * HTML-entity escaping (or bypass custom escaping by using appropriate tools) (6 hours)

### Build process
  * Vagrantfile or similar for contributors (16 hours)
  * Compiled output separated from repository (8 hours)
  * Latest build / Download page (16 hours)
  * Cacheable output, granular builds (16 hours)

### Documentation
  * Basic usage
  * Integration into build process
  * Integration into framework / tool

## Future Roadmap

### New features
  * Closure-local error-reporting disable/enable (8 hours)
  * Batched reporting (8 hours)
  * Pluggable, register custom handlers (8 hours)

### Framework/Runtime integration
  * Determine best integration partners, # of installs, difficulty, receptivity
    * Back-end
      * Rails
      * Django
      * Struts
      * Symphony
      * Node.js (process.on('uncaughtException'), Domain objects http://nodejs.org/docs/v0.7.8/api/domain.html)
      * Grunt / Yeoman
      * Framework-of-the-week
    * Front-end
      * jQuery (ajaxError)
      * Backbone ("error" events)
      * Angular (http://docs.angularjs.org/api/ng.$exceptionHandler)
      * Ember (becameError, becameInvalid)
  * Integration
    * Copy-n-paste snippet (future-proof-ish)
    * Automated snippet inlining for frameworks / build tools
      * Tie into framework plumbing
      * Unix utility: html &rarr; html+snippet

### Future Architecture
Current design is strongly-coupled, both to its own parts, and to the browser. Decompose to:

  * Bootstrapper - Brings up the rest of the system. This should probably be small enough to inline in a page header or to cache extremely aggressively
  * Capabilities sniffer - Determines which Error decoration tooling will be necessary to decorate errors in the current environment.
  * Configuration builder - Combines initialization configuration and capabilities-detection configuration into a requestable error-reporting engine
  * Stacktrace composers (per-browser/runtime/capabilities set) - Build standardized, information-rich error objects for reporitng to the back end
    * TraceKit
    * StackTrace.js
    * Fork best-in-class and push necessary changes upstream
  * Error capturer - Hook into the environment's extant error-reporting infrastructure
  * Reporter - Error report serialization and transport
